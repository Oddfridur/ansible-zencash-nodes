---
- name: Configure sysctl
  sysctl:
    name: "{{item.name}}"
    value: "{{item.value}}"
    state: present
  with_items:
  - { name: vm.swappiness, value: 10 }
  - { name: net.ipv6.conf.all.proxy_ndp, value: 1 }
  - { name: net.ipv6.conf.all.forwarding, value: 1 }
  - { name: net.ipv6.conf.default.forwarding, value: 1 }
  - { name: net.ipv6.conf.default.proxy_ndp, value: 1 }
  - { name: fs.inotify.max_queued_events, value: 1048576 }
  - { name: fs.inotify.max_user_instances, value: 1048576 }
  - { name: fs.inotify.max_user_watches, value: 1048576 }
  - { name: vm.max_map_count, value: 262144 }
  - { name: kernel.dmesg_restrict, value: 1 }
- name: Download prerequisites
  apt:
    name: lxc,python-lxc,ufw,fail2ban
    state: present
    update_cache: yes
- name: Copy lxcbr0 service to enable ipv6 arp proxying
  copy:
    src: lxcbr0.service
    dest: /etc/systemd/system/lxcbr0.service
- systemd:
    name: fail2ban
    state: started
    enabled: yes
- name: Template ndp proxy script
  template:
    src: add-ndp-proxy.sh
    dest: /etc/add-ndp-proxy.sh
    mode: o+x
- systemd:
    name: lxcbr0
    state: started
    enabled: yes
    daemon_reload: yes
- lineinfile:
    path: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY='
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
- name: Allow access to rsyslog from container's network
  ufw:
    rule: allow
    from: "{{ipv6_bridge_address}}/112"
- name: Set logging
  ufw:
    logging: on
- name: Allow everything and enable UFW
  ufw:
    state: enabled

- name: Configure static address for monitoring
  lineinfile:
    line: dhcp-host=monitoring.{{vault_domain}},10.0.3.100
    path: /etc/lxc/dnsmasq.conf
    create: yes
  register: dhcp_added
  when: "groups['monitoring'] is defined"

- name: Enable static lxc addresses
  lineinfile:
    path: /etc/default/lxc-net
    line: 'LXC_DHCP_CONFILE=/etc/lxc/dnsmasq.conf'
  register: lxc_net
  when: "groups['monitoring'] is defined"

- name: Restart lxc-net
  systemd:
    name: lxc-net
    state: restarted
  when: (lxc_net.changed or dhcp_added.changed) and groups['monitoring'] is defined

- name: Restablish lxcbr0 arp entries & ipv6 address
  shell: /etc/add-ndp-proxy.sh
  when: (lxc_net.changed or dhcp_added.changed) and groups['monitoring'] is defined

- name: Check if containers are configured
  stat:
      path: /var/lib/lxc/{{vault_nodes[item].ansible_fqdn}}/.configured
  with_items: "{{ groups['nodes'] }}"
  register: containers_configured

- name: Create secure node containers
  lxc_container:
    name: "{{vault_nodes[item.item].ansible_fqdn}}"
    container_log: true
    template: ubuntu
    state: started
    template_options: --release xenial
    container_command: |
      cat <<EOF > /etc/network/interfaces
      auto lo
      iface lo inet loopback

      auto eth0
      iface eth0 inet dhcp
      iface eth0 inet6 static
        address {{vault_nodes[item.item].ansible_host}}
        netmask 112
        gateway {{ipv6_bridge_address}}
      EOF
      ifdown eth0
      ifup eth0
      sleep 1
      apt-get update
      apt-get -y install openssh-server python
      mkdir /root/.ssh
      echo '{{ssh_public_key}}' > /root/.ssh/authorized_keys
  loop: "{{containers_configured.results}}"
  when: item.stat.exists == False

- name: Create secure nodes configuration check file
  file:
    state: touch
    path: /var/lib/lxc/{{vault_nodes[item.item].ansible_fqdn}}/.configured
  loop: "{{containers_configured.results}}"
  when: item.stat.exists == False

- name: Check if monitoring container is configured
  stat:
    path: /var/lib/lxc/{{vault_monitoring.ansible_fqdn}}/.configured
  register: monitoring_containers_configured
  when: "groups['monitoring'] is defined"

- name: Create monitoring container
  lxc_container:
    name: "{{vault_monitoring.ansible_fqdn}}"
    container_log: true
    template: ubuntu
    state: started
    template_options: --release xenial
    container_command: |
      cat <<EOF > /etc/network/interfaces
      auto lo
      iface lo inet loopback
       auto eth0
      iface eth0 inet dhcp
      iface eth0 inet6 static
        address {{vault_monitoring.ansible_host}}
        netmask 112
        gateway {{ipv6_bridge_address}}
      EOF
      ifdown eth0
      ifup eth0
      sleep 1
      apt-get update
      apt-get -y install openssh-server python
      mkdir /root/.ssh
      echo '{{ssh_public_key}}' > /root/.ssh/authorized_keys
  when: groups['monitoring'] is defined and monitoring_containers_configured.stat.exists == False

- name: Create configuration check file
  file:
    state: touch
    path: /var/lib/lxc/{{vault_monitoring.ansible_fqdn}}/.configured
  when: groups['monitoring'] is defined and monitoring_containers_configured.stat.exists == False

- name: Configure autostart for secure node containers
  lineinfile:
    path: "/var/lib/lxc/{{vault_nodes[item].ansible_fqdn}}/config"
    regexp: '^lxc.start.auto ='
    line: 'lxc.start.auto = 1'
  with_items: "{{ groups['nodes'] }}"

- name: Configure autostart for monitoring container
  lineinfile:
    path: "/var/lib/lxc/{{vault_monitoring.ansible_fqdn}}/config"
    regexp: '^lxc.start.auto ='
    line: 'lxc.start.auto = 1'
  when: "groups['monitoring'] is defined"

- name: Configure start delay for secure node containers
  lineinfile:
    path: "/var/lib/lxc/{{vault_nodes[item].ansible_fqdn}}/config"
    line: 'lxc.start.delay = 25'
  with_items: "{{ groups['nodes'] }}"

- name: Configure start order for monitoring container
  tags: test
  lineinfile:
    path: "/var/lib/lxc/{{vault_monitoring.ansible_fqdn}}/config"
    line: 'lxc.start.order = 0'
  when: "groups['monitoring'] is defined"

- name: Create zen folder
  file:
    path: /var/lib/lxc/{{vault_nodes[item.item].ansible_fqdn}}/rootfs/home/zend/.zen/
    state: directory
  loop: "{{containers_configured.results}}"
  when: item.stat.exists == False

- name: Copy blockchain blocks
  shell: cp -r * /var/lib/lxc/{{vault_nodes[item.item].ansible_fqdn}}/rootfs/home/zend/.zen
  args:
    chdir: "{{blocks_directory}}"
  loop: "{{containers_configured.results}}"
  when: item.stat.exists == False and blocks_directory is defined

# configure forwarding for monitoring over ipv4
