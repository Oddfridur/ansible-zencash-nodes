---
- name: Check for previously generated username
  stat:
    path: /home/zend/.zen/.username
  register: username_exists

- name: Check for previously generated password
  stat:
    path: /home/zend/.zen/.password
  register: password_exists

- name: Generate username
  set_fact:
    username: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
  when: username_exists.stat.exists == False

- name: Generate password
  set_fact:
    password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
  when: password_exists.stat.exists == False

- name: Create username check file
  copy:
    dest: /home/zend/.zen/.username
    content: "{{username}}"
  when: username_exists.stat.exists == False

- name: Create password check file
  copy:
    dest: /home/zend/.zen/.password
    content: "{{password}}"
  when: password_exists.stat.exists == False

- name: Gather username
  shell: cat /home/zend/.zen/.username
  register: generated_username
  when: username_exists.stat.exists == True

- name: Set username
  set_fact:
    username: "{{ generated_username.stdout }}"
  when: username_exists.stat.exists == True

- name: Gather password
  shell: cat /home/zend/.zen/.password
  register: generated_password
  when: username_exists.stat.exists == True

- name: Set password
  set_fact:
    password: "{{ generated_password.stdout }}"
  when: password_exists.stat.exists == True

- name: Disable ssh server
  systemd:
    name: ssh
    enabled: false

- name: Create zend user
  user:
    name: zend
    state: present
    shell: /bash/nologin

- name: Set zend folder owner
  file:
    path: /home/zend
    owner: zend
    group: zend
    recurse: yes

- name: Install prerequisites
  apt:
    name: apt-transport-https,lsb-release,ca-certificates,wget,socat,git,npm
    state: latest

- name: Add key for repo
  apt_key:
    keyserver: ha.pool.sks-keyservers.net
    id: 219F55740BBF7A1CE368BA45FB7053CE4991B669

- name: Add zend repository
  apt_repository:
    repo: deb https://zencashofficial.github.io/repo/ xenial main
    state: present

- name: Install zend package
  apt:
    name: zen
    state: latest

- name: Check for params folder
  stat:
    path: /home/zend/.zcash-params
  register: params_exists

- name: zen-fetch-params
  shell: zen-fetch-params
  become_user: zend
  when: params_exists.stat.exists == False

- name: Check for zen.conf
  stat:
    path: /home/zend/.zen/zen.conf
  register: zenconf_exists

- name: Initial zend run
  shell: zend
  become_user: zend
  when: zenconf_exists.stat.exists == False
  ignore_errors: true

- name: Clone acme.sh
  git:
    repo: https://github.com/Neilpang/acme.sh.git
    dest: /home/zend/acme.sh
    version: master

- name: Check for acme.sh
  stat:
    path: /home/zend/.acme.sh
  register: acme_exists

- name: Install acme.sh
  become_user: zend
  shell: /home/zend/acme.sh/acme.sh --install
  args:
    chdir: /home/zend/acme.sh
  when: acme_exists.stat.exists == False

- name: Allow acme.sh sudo
  lineinfile:
    path: "/etc/sudoers"
    line: 'zend ALL=(ALL) NOPASSWD: /home/zend/.acme.sh/acme.sh'

- name: Check for certificate
  stat:
    path: "/home/zend/.acme.sh/{{ansible_fqdn}}/{{ansible_fqdn}}.cer"
  register: certificate_exists

- name: Get SSL certificate
  become_user: zend
  shell: "sudo /home/zend/.acme.sh/acme.sh --issue --standalone -d {{ansible_fqdn}} --listen-v6"
  when: certificate_exists.stat.exists == False

- name: Copy ca.crt
  copy:
    src: /home/zend/.acme.sh/{{ansible_fqdn}}/ca.cer
    dest: /usr/local/share/ca-certificates/ca.crt
    remote_src: yes
  register: ca_cert

- name: Update ca-certificates
  shell: update-ca-certificates
  when: ca_cert.changed

- name: Forward syslog to host
  copy:
    dest: /etc/rsyslog.d/50-default.conf
    content: '*.* action(type="omfwd" target="{{ipv6_bridge_address}}" port="514" protocol="tcp")'
  register: syslog_configured

- name: Restart rsyslog
  systemd:
    name: rsyslog
    state: restarted
  when: syslog_configured.changed

- name: Copy zend service script
  copy:
    src: zend.service
    dest: /etc/systemd/system/zend.service

- name: Copy secnodetracker service script
  copy:
    src: secnodetracker.service
    dest: /etc/systemd/system/secnodetracker.service

- name: Template zen.conf
  template:
    src: zen.conf
    dest: /home/zend/.zen/zen.conf
  register: zen_conf

- name: Start and enable zend
  systemd:
    daemon_reload: yes
    name: zend
    enabled: yes
    state: started

- name: Check for secnodetracker
  stat:
    path: /home/zend/secnodetracker
  register: secnodetracker_exists

- name: Clone secnodetracker
  become_user: zend
  git:
    repo: https://github.com/ZencashOfficial/secnodetracker
    dest: /home/zend/secnodetracker
    version: master
  when: secnodetracker_exists.stat.exists == False

- name: Check for npm
  stat:
    path: /root/.npm/n/
  register: npm_exists

- name: Install npm
  shell: npm install -g n
  when: npm_exists.stat.exists == False

- name: Check for nodejs
  stat:
    path: /usr/local/n
  register: nodejs_exists

- name: Install nodejs
  shell: n latest
  when: nodejs_exists.stat.exists == False

- name: Check for nodejs
  stat:
    path: /home/zend/secnodetracker/package-lock.json
  register: modules_exists

- name: Get npm packages
  shell: npm install
  become_user: zend
  args:
    chdir: /home/zend/secnodetracker/
  when: modules_exists.stat.exists == False

- name: Check for secnodetracker config folder
  stat:
    path: /home/zend/secnodetracker/config
  register: config_exists

- name: Create secnodetracker config folder
  file:
    path: /home/zend/secnodetracker/config
    state: directory
    owner: zend
    group: zend
  when: config_exists.stat.exists == False

- name: Template settings
  copy:
    content: "{{item.value}}"
    dest: "/home/zend/secnodetracker/config/{{item.name}}"
    owner: zend
    group: zend
  loop:
    - { name: "email",value: "{{tracker_email}}"}
    - { name: "fqdn",value: "{{ansible_fqdn}}"}
    - { name: "home",value: "ts{{ ['1','2','3','4'] | random(seed=ansible_fqdn) }}.{{tracker_region}}"}
    - { name: "ipv",value: "6"}
    - { name: "region",value: "{{tracker_region}}"}
    - { name: "rpchost",value: "127.0.0.1"}
    - { name: "rpcpassword",value: "{{password}}"}
    - { name: "rpcport",value: "18231"}
    - { name: "rpcuser",value: "{{username}}"}
    - { name: "stakeaddr",value: "{{stake_address}}"}
  register: template_settings

- debug: msg={{tracker_nodeid is defined and tracker_nodeid | length > 0}}
  tags: test

- name: Template nodeid
  tags: test
  copy:
    content: "{{tracker_nodeid}}"
    dest: "/home/zend/secnodetracker/config/nodeid"
    owner: zend
    group: zend
  when: tracker_nodeid is defined and tracker_nodeid | length > 0

- name: Check for secnodetracker servers config
  stat:
    path: /home/zend/secnodetracker/config/servers
  register: servers_config_exists

- name: Template secnodetracker servers config
  copy:
    content: "ts2.eu,ts1.eu,ts3.eu,ts4.eu,ts4.na,ts3.na,ts2.na,ts1.na"
    dest: "/home/zend/secnodetracker/config/servers"
    owner: zend
    group: zend
  when: servers_config_exists.stat.exists == False

- name: Start and enable secnodetracker
  systemd:
    daemon_reload: yes
    name: secnodetracker
    enabled: yes
    state: restarted
  when: template_settings.changed

- name: Create .zen folder for root
  file:
    path: /root/.zen
    state: directory

- name: Create zen.conf for root
  copy:
    remote_src: yes
    src: /home/zend/.zen/zen.conf
    dest: /root/.zen/zen.conf
